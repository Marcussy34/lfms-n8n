{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "command": "=pdftoppm -png \"/data/shared/{{$json.body.fileName}}\" \"/data/shared/{{$json.body.fileName.replace('.pdf', '')}}\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "618a2ee5-2da9-414e-a56f-6e172af32e46",
      "name": "Convert to PNG"
    },
    {
      "parameters": {
        "command": "=# Extract NAME from JSON\nNAME=\"{{ $json.name }}\"\nNAME=\"${NAME%.pdf}\"  # Remove .pdf extension\n\necho -e \"\\nExtracted Name: $NAME\\n\"\n\n# Loop through all matching PNG files\nfor file in /data/shared/\"${NAME}\"-*.png; do \n  [ -e \"$file\" ] || continue  # Skip if file doesn't exist\n\n  # Define output file without .txt (Tesseract adds it automatically)\n  output_txt=\"${file%.png}\"\n\n  echo \"Processing: $file -> ${output_txt}.txt\"\n\n  # Run Tesseract OCR\n  tesseract \"$file\" \"$output_txt\" --oem 3 --psm 6\n\n  echo \"Extracted text saved to: ${output_txt}.txt\"\ndone\n\necho -e \"\\nâœ… OCR Processing Complete!\\n\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        220,
        100
      ],
      "id": "49caf266-c477-47eb-bc91-ce6ed0980418",
      "name": "PNG to Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2295dc22-9f7f-42c5-acc2-bd70232a93ee",
              "name": "name",
              "value": "={{ $json.body.fileName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        200
      ],
      "id": "d018dba9-3140-4e54-af42-9ef5547c4fa1",
      "name": "Get PDF File Name"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "3e0acb1f-2166-4481-8bf7-3734faccca90",
        "options": {
          "binaryPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -640,
        80
      ],
      "id": "91d0a0a2-5a2b-4911-80e8-f31ad036700c",
      "name": "Webhook",
      "webhookId": "3e0acb1f-2166-4481-8bf7-3734faccca90"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/data/shared/{{ $json.body.fileName }}",
        "dataPropertyName": "=file0",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -340,
        80
      ],
      "id": "1dac3d9f-2ea3-493c-a5f1-c46810af8cbd",
      "name": "Download PDF to Local Disk"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1600,
        120
      ],
      "id": "fe3b1a13-69c4-46f4-853d-e60847ea791a",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "command": "=ls /data/shared/\"$(basename -- {{ $('Get PDF File Name').item.json.name }} .pdf)\"-*.txt\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        420,
        40
      ],
      "id": "1e142ff2-928d-43e8-872f-485612c51d48",
      "name": "Get Matching TXT Files"
    },
    {
      "parameters": {
        "jsCode": "// Split the stdout output into an array of file paths\nconst filePaths = $json[\"stdout\"].split(\"\\n\");\n\n// Return an array of objects, one per file path\nreturn filePaths.map(path => ({ json: { filePath: path.trim() } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        40
      ],
      "id": "60782b0f-53c7-408d-a35b-79fbdc5fd409",
      "name": "Process TXT File Paths"
    },
    {
      "parameters": {
        "jsCode": "const files = $input.all();\nlet combinedText = \"\";\n\nfor (const file of files) {\n    if (file.binary && file.binary.data) {\n        // Extract the Base64 encoded text content\n        const base64Text = file.binary.data.data;  \n        \n        // Decode Base64 to UTF-8 text\n        const textData = Buffer.from(base64Text, \"base64\").toString(\"utf-8\");  \n\n        combinedText += textData + \"\\n\\n\";  // Merge files with spacing\n    }\n}\n\n// Pass the decoded text to the next node\nreturn [{ json: { chatInput: combinedText } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        40
      ],
      "id": "9bb69481-adf1-44fc-8767-fedad5f56f0e",
      "name": "Group TXT Files"
    },
    {
      "parameters": {
        "fileSelector": "={{ $json.filePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        780,
        40
      ],
      "id": "83f3cd52-f387-47f0-ba8e-7ad755e42906",
      "name": "Read TXT File",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "command": "=/opt/venv/bin/python /data/shared/extract_entities.py /data/shared /data/shared/output_{{ $json.newFileName }}.json"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1280,
        40
      ],
      "id": "7b6b02c5-9910-4078-b3d1-8b41c559f1d6",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Read TXT File').item.json.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1720,
        -400
      ],
      "id": "ae88ab2c-a4b8-4d55-b120-4d69c7cc10b7",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "jsCode": "const fileName = $('Webhook').first().json.body.fileName;\nconst newFileName = fileName.replace(/\\.[^.]+$/, ''); // Removes the file extension\n\nreturn {\n  newFileName\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        40
      ],
      "id": "79a5eb35-040d-460a-95b2-6d3ac61a2b06",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "PNG to Text": {
      "main": [
        [
          {
            "node": "Get Matching TXT Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get PDF File Name": {
      "main": [
        [
          {
            "node": "PNG to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Download PDF to Local Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF to Local Disk": {
      "main": [
        [
          {
            "node": "Convert to PNG",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get PDF File Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Get Matching TXT Files": {
      "main": [
        [
          {
            "node": "Process TXT File Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process TXT File Paths": {
      "main": [
        [
          {
            "node": "Read TXT File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group TXT Files": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read TXT File": {
      "main": [
        [
          {
            "node": "Group TXT Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b727768d-9cf7-4dec-9ff1-bd4c95775b4c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "0ZshLJpbOnQU6fzG",
  "tags": []
}